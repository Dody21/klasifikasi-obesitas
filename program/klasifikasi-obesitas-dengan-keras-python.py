# -*- coding: utf-8 -*-
"""UASPemodelanData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HIoeWxfoOsuMC6og1xx3u070avdfsgTD

# Import library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier

"""# Load dataset"""

data = pd.read_csv('/content/obesitas.csv')

"""# Eksplorasi dataset"""

print("\nDataset Overview:\n", data.head())
print("\nInfo Dataset:\n")
data.info()
print("\nMissing Values:\n", data.isnull().sum())
print("\nDescriptive Statistics:\n", data.describe())

"""# Visualisasi data"""

sns.countplot(data['NObeyesdad'])
plt.title('Distribusi Kategori Tingkat Obesitas')
plt.xlabel('Tingkat Obesitas')
plt.ylabel('Jumlah')
plt.xticks(rotation=45)
plt.show()

"""# Preprocessing Data

# Encoding untuk fitur kategorikal
"""

encoder = LabelEncoder()
for col in data.select_dtypes(include=['object']).columns:
    data[col] = encoder.fit_transform(data[col])

"""# Pisahkan fitur dan label"""

X = data.drop(columns=['NObeyesdad'])
y = data['NObeyesdad']

"""# Standarisasi fitur"""

scaler = StandardScaler()
X = scaler.fit_transform(X)

"""# Split data untuk training dan testing"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Model 1: Decision Tree"""

print("\n=== Decision Tree Classifier ===")
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)
dt_predictions = dt_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, dt_predictions))
print("Classification Report:\n", classification_report(y_test, dt_predictions))

"""# Confusion Matrix Decision Tree"""

sns.heatmap(confusion_matrix(y_test, dt_predictions), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix - Decision Tree')
plt.show()

"""# Model 2: K-Nearest Neighbors"""

print("\n=== K-Nearest Neighbors (KNN) ===")
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)
knn_predictions = knn_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, knn_predictions))
print("Classification Report:\n", classification_report(y_test, knn_predictions))

"""# Confusion Matrix KNN"""

sns.heatmap(confusion_matrix(y_test, knn_predictions), annot=True, fmt='d', cmap='Greens')
plt.title('Confusion Matrix - KNN')
plt.show()

"""# Perbandingan Kinerja"""

dt_accuracy = cross_val_score(dt_model, X, y, cv=5, scoring='accuracy').mean()
knn_accuracy = cross_val_score(knn_model, X, y, cv=5, scoring='accuracy').mean()

print("\n=== Model Comparison ===")
print(f"Decision Tree Accuracy (CV): {dt_accuracy:.2f}")
print(f"KNN Accuracy (CV): {knn_accuracy:.2f}")

"""# Visualisasi Perbandingan"""

models = ['Decision Tree', 'KNN']
accuracies = [dt_accuracy, knn_accuracy]
sns.barplot(x=models, y=accuracies, palette='viridis')
plt.title('Perbandingan Akurasi Model')
plt.ylabel('Accuracy')
plt.show()